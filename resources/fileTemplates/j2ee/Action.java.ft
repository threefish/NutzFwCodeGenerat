package #[actionPackage];

import com.nutzfw.annotation.AutoCreateMenuAuth;
import com.nutzfw.biz.DictBiz;
import com.nutzfw.common.Cons;
import #[entityPackage].#[entityName];
import com.nutzfw.filter.CheckRoleAndSession;
import #[servicePackage].#[serviceFileName];
import com.nutzfw.vo.AjaxResult;
import com.nutzfw.vo.LayuiTableDataListVO;
import lombok.extern.java.Log;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.nutz.aop.interceptor.ioc.TransAop;
import org.nutz.dao.Cnd;
import org.nutz.ioc.aop.Aop;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.lang.Strings;
import org.nutz.lang.util.NutMap;
import org.nutz.mvc.annotation.*;
import org.nutz.plugins.validation.Errors;

/**
 * @author #[user] xxx@qq.com
 * @date #[date(), dateFormat="yyyy年MM月dd日"]
 * #[funName]
 */
@IocBean
@At("/#[entityName]")
@Filters(@By(type = CheckRoleAndSession.class, args = {Cons.SESSION_USER_KEY, Cons.SESSION_USER_ROLE}))
@Log
public class #[actionFileName] {

    @Inject
    #[serviceFileName] #[sp.uncapitalize(serviceFileName)];

    @Inject
    DictBiz dictBiz;

    /**
     * 管理页面
     *
     * @return
     */
    @At("/index")
    @Ok("btl:#[templatePath]index.html")
    @RequiresPermissions("#[entityName].index")
    @AutoCreateMenuAuth(name = "#[funName]管理", icon = "fa-cogs", parentPermission = "sys.loggistics")
    public NutMap index() {
        NutMap data=NutMap.NEW();
        <##for(field in fields){##>
        <##if(field.dict){##>
        data.put("#[field.dictCode]",dictBiz.getDictEnumsJson("#[field.dictCode]"));
        <##}}##>
        return data;
    }

    /**
     * 列表管理
     *
     * @param pageNum
     * @param pageSize
     * @param key
     * @return
     */
    @At("/list")
    @Ok("json:{nullAsEmtry:true,dateFormat:'yyyy年MM月dd日'}")
    @RequiresPermissions("#[entityName].index")
    public LayuiTableDataListVO list(@Param("pageNum") int pageNum,
                                     @Param("pageSize") int pageSize,
                                     @Param("key") String key
    ) {
        Cnd cnd = Cnd.NEW();
        if (Strings.isNotBlank(key)) {
            cnd.and("name", "like", "%" + key + "%");
        }
        cnd.desc("opAt");
        return #[sp.uncapitalize(serviceFileName)].listPage(pageNum, pageSize, cnd);
    }

    /**
     * 新增、编辑保存页面
     *
     * @param #[primaryKey]
     * @return
     */
    @At("/edit")
    @Ok("btl:#[templatePath]edit.html")
    @RequiresPermissions("#[entityName].index.edit")
    @AutoCreateMenuAuth(name = "新增/编辑#[funName]", type = AutoCreateMenuAuth.RESOURCE, icon = "fa-cogs", parentPermission = "#[entityName].index")
    public NutMap edit(@Param("#[primaryKey]") String #[primaryKey]) {
        return NutMap.NEW().setv("#[primaryKey]", #[primaryKey]).setv("fromDataEdit", true);
    }

    /**
     * 新增、编辑保存页面
     *
     * @param #[primaryKey]
     * @return
     */
    @At("/view")
    @Ok("btl:#[templatePath]edit.html")
    @RequiresPermissions("#[entityName].index.edit")
    @AutoCreateMenuAuth(name = "查看详情", type = AutoCreateMenuAuth.RESOURCE, icon = "fa-cogs", parentPermission = "#[entityName].index")
    public NutMap view(@Param("#[primaryKey]") String #[primaryKey]) {
        return NutMap.NEW().setv("#[primaryKey]", #[primaryKey]).setv("fromDataEdit", false);
    }

    /**
     * 加载详情
     *
     * @param #[primaryKey]
     * @return
     */
    @At("/details")
    @Ok("json:{ignoreNull:false,dateFormat:'yyyy-MM-dd'}")
    @RequiresPermissions("#[entityName].index.edit")
    public AjaxResult details(@Param("#[primaryKey]") String #[primaryKey]) {
        return AjaxResult.sucess(#[sp.uncapitalize(serviceFileName)].fetch(#[primaryKey]));
    }


    /**
     * 批量删除
     *
     * @param #[primaryKey]s
     * @return
     */
    @At("/del")
    @Ok("json")
    @RequiresPermissions("#[entityName].index.del")
    @AutoCreateMenuAuth(name = "批量删除", type = AutoCreateMenuAuth.RESOURCE, icon = "fa-cogs", parentPermission = "#[entityName].index")
    public AjaxResult del(@Param("::#[primaryKey]s") String[] #[primaryKey]s) {
        <##if(uuid){ ##>
        #[sp.uncapitalize(serviceFileName)].deleteByUUIDs(#[primaryKey]s);
        <##}else{##>
        #[sp.uncapitalize(serviceFileName)].delete(#[primaryKey]s,false);
        <##}##>
        return AjaxResult.sucess("删除成功");
    }

    /**
     * 保存
     *
     * @param data
     * @return
     */
    @At("/save")
    @Ok("json")
    @POST
    @RequiresPermissions("#[entityName].index.edit")
    @Aop(TransAop.READ_UNCOMMITTED)
    public AjaxResult save(@Param("::fromData") #[entityName] data, Errors errors) {
        if (errors.hasError()) {
            return AjaxResult.error(errors.getErrorsList().iterator().next());
        }
        Cnd checkCnd = Cnd.NEW();
        if (Strings.isNotBlank(data.get#[sp.capitalize(primaryKey)]())) {
            checkCnd.and("name", "=", data.getName()).and("#[primaryKey]", "!=", data.get#[sp.capitalize(primaryKey)]());
        } else {
            checkCnd.and("name", "=", data.getName());
        }
        int count = #[sp.uncapitalize(serviceFileName)].count(checkCnd);
        if (count > 0) {
            return AjaxResult.errorf("【{0}】名称已经存在!", data.getName());
        } else {
                #[sp.uncapitalize(serviceFileName)].insertOrUpdate(data);
            return AjaxResult.sucessMsg("保存成功");
        }
    }
}
